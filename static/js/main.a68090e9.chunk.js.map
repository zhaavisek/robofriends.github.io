{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchField.js","components/Scroll.js","components/robots.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchField","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","username","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","FilteredRobots","filter","toLowerCase","includes","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACpB,OACM,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,KAC9C,6BACA,4BAAKC,GACL,2BAAIC,MCkBII,EAtBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAChB,OACC,yBAAKJ,UAAU,MAETI,EAAOC,KAAI,SAACC,EAAKC,GACxB,OACQ,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCCXU,EAZG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OACC,6BACG,2BACCV,UAAU,gCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCDI,G,MARF,SAACC,GACb,OACC,yBAAKC,MAAQ,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UACjEJ,EAAMK,YCNIhB,EAAS,CACpB,CACEP,GAAI,EACJC,KAAM,gBACNuB,SAAU,OACVtB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNuB,SAAU,YACVtB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNuB,SAAU,WACVtB,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNuB,SAAU,WACVtB,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNuB,SAAU,SACVtB,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNuB,SAAU,mBACVtB,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNuB,SAAU,eACVtB,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNuB,SAAU,gBACVtB,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNuB,SAAU,WACVtB,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNuB,SAAU,iBACVtB,MAAO,2BCGIuB,E,kDAtDd,aAAc,IAAD,8BACZ,gBAeMC,eAAe,SAACC,GACf,EAAKC,SAAS,CAAChB,YAAYe,EAAME,OAAOC,SAf/C,EAAKC,MAAM,CACVxB,OAAO,GACPK,YAAY,IAJD,E,gEAQO,IAAD,OAClBoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAY3B,IAAD,OACDC,EAAe9B,EAAO+B,QAAO,SAAA/B,GAC/B,OAAOA,EAAON,KAAKsC,cAAcC,SAAS,EAAKT,MAAMnB,YAAY2B,kBAGlE,OAA+B,IAA3BE,KAAKV,MAAMxB,OAAOmC,OACd,wBAAIvC,UAAU,MAAd,gBAIL,yBAAKA,UAAU,MACrB,wBAAIA,UAAU,MAAd,eACA,6BACA,kBAAC,EAAD,CAAaU,aAAc4B,KAAKf,iBAChC,6BACA,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAUnB,OAAQ8B,Y,GAxCRM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a68090e9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({id,name,email})=>{\r\n\treturn(\r\n       <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n       <img alt='robot' src={`https://robohash.org/${id}`}/>\r\n       <div>\r\n       <h2>{name}</h2>\r\n       <p>{email}</p>\r\n       </div>\r\n       </div>\r\n\r\n  );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList=({robots})=>{\r\n\treturn(\r\n\t\t<div className='tc'>\r\n\t\t{\r\n        robots.map((user,i)=>{\r\n\treturn (\r\n         <Card \r\n         key={i}\r\n         id={robots[i].id}\r\n         name={robots[i].name}\r\n         email={robots[i].email}\r\n         />\r\n\r\n\r\n\t\t); \r\n})\r\n\r\n\t\t}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchField=({SearchChange})=>{\r\n\treturn(\r\n\t\t<div>\r\n     <input \r\n      className='pa3 ba b--green bg-light-blue' \r\n      type='search'\r\n      placeholder='search robots' \r\n      onChange={SearchChange}/>\r\n     </div>\r\n\r\n\t);\r\n}\r\nexport default SearchField;","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={ {overflowY:'scroll', border:'2px solid black',height:'700px' } }>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n\r\n};\r\nexport default Scroll;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React, { Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchField from '../components/SearchField';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport {robots} from '../components/robots';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t\t\tSearchField:''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots:users}));\r\n          \r\n\r\n\r\n\t}\r\n        onSearchChange=(event)=>{\r\n        \tthis.setState({SearchField:event.target.value});\r\n    \t\r\n \r\n    }\r\n\r\n\r\n\trender(){\r\n\t\tconst FilteredRobots=robots.filter(robots=>{\r\n    \t\treturn robots.name.toLowerCase().includes(this.state.SearchField.toLowerCase());\r\n    \t})\r\n\r\n    \tif (this.state.robots.length===0){\r\n    \t\treturn <h1 className='tc'>LOADING.....</h1>\r\n    \t}else{\r\n\t\treturn(\r\n\r\n        <div className='tc'>\r\n\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t<div>\r\n\t\t<SearchField SearchChange={this.onSearchChange}/>\r\n\t\t<div>\r\n\t\t<Scroll>\r\n        <CardList robots={FilteredRobots}/>\r\n        </Scroll>\r\n        </div>\r\n        </div>\r\n        </div>\r\n\r\n\r\n\t\t);\r\n\t}\r\n\r\n\t}\r\n\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}